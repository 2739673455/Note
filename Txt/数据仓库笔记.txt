数据库和数据仓库的区别
	数据库(database)
		功能: 存放业务中基础核心的数据
		来源: 全企业的业务系统
		存储: 以数据查询为主要操作(行式存储、索引、不能存储海量数据)
		价值: 保障业务系统的正常执行
	数据仓库(data warehouse)
		功能: 加工数据，提供给别人
		来源: 数据库的数据
		存储: 以数据统计分析为主要操作(列式存储、KV对、必须存储海量数据)
		价值: 为企业经营决策提供数据支撑

数据仓库的数据源
	数据仓库不能将数据库直接作为数据源:
		数据库的数据存储方式为行式存储，不利于统计分析
		数据库不是为了数据仓库服务，所以数据仓库不应该影响数据库正常运行
		数据库不会存储海量数据，但是数据仓库需要海量数据
	数据仓库应该搭建自己的数据源:
		数据库的数据和数据仓库的数据应该保持一致
		数据库的数据应该源源不断地汇总到数据仓库的数据源中(数据同步)
	降低数据库和数据仓库耦合性的方式: 增加中间件

数据仓库统计分析的步骤就是它的分层结构:
	1.原始数据层(ODS)
		Operate Data Store，整个数据仓库统计分析的数据来源
		功能: 汇总业务数据库的数据
		分区策略: 哪一天采集的数据就存放到哪一天的分区
		存储格式:
			尽可能缩短同步时间
			数据格式:    不变(tsv，json)
			数据存储方式: 不变(行式存储)
			数据压缩方式: 不变(gzip)
				gzip:    Hadoop默认支持   压缩比率极高 压缩效率低
				lzo:     Hadoop默认不支持 压缩比率高   压缩效率高
				snappy:  Hadoop默认不支持 压缩比率低   压缩效率极高
			模型设计:    不变
		命名规范: ods_表名_单分区增量全量标识(inc/full)
	2.明细数据层(DWD)
		Data Warehouse Detail，对数据源中的数据进行加工处理，为统计分析做准备
		本质是融合ODS层多张表，保存行为数据
		ODS层保存的就是状态数据，因为MySQL业务数据库不存行为数据，根据状态反推行为
		绝大多数的事实表(行为)都是增量表，特殊业务例外
		数据仓库的分层架构是逻辑架构，不存在具体的物理文件或文件夹
		功能:
			数据校验
			转换数据存储方式: 行式 -> 列式
		设计要点:
			建表需参考 事实表 设计理论
			数据量大，需要设计分区表
		分区策略:
			事务事实表: 哪一天的业务行为就存放到哪一天的分区
			周期快照事实表: 哪一天的状态数据就存放到哪一天的分区
			累计快照事实表: 使用流程中最后一个业务的时间作为分区
		存储格式: orc列式存储 + snappy压缩
		命名规范: dwd + 数据域(包名，分类) + 行为 + 全量/增量(full/inc)
	3.汇总数据层(DWS)
		Data Warehouse Summary
		功能: 统计
		设计要点:
			1. 数据量不会很少，需要设计分区表
			2. 数据不是最终结果，需要进一步统计分析
				列的设计:
					需要参考最终表的设计(1d,nd)
					td
		分区策略: 哪一天统计的数据就存放到哪一天的分区
			1d表: 业务日期和统计日期一致
			nd表，td表: 业务日期和统计日期不一致
		存储格式: orc列式存储 + snappy压缩
		命名规范: dws + 数据域 + 统计粒度 + 业务过程 + 统计周期
		中间计算表需要考虑3个环节，如果相同的场合下，可以将多张表融合成一张表
			业务过程相同: 数据来源相同
			统计周期相同: 数据范围相同
			统计粒度相同: 一行数据表示的含义
	4.数据应用层(ADS)
		Application Data Service
		功能:
			分析
			将分析后的结果对外提供服务
		设计要点:
			1. 数据量不会很多: 不需要分区
			2. 不需要进一步统计分析: 不需要orc和snappy，可以采用行式存储tsv,gzip
			3. 客户的需求不会太复杂: 表的设计不会太复杂
			4. 表名: 分层标记 + 需求名称
		指标分析体系:
			根据分析的难易程度，分为不同的类型
				1. 原子指标: 让指标分析最简化
					业务行为(表)
					度量值
					聚合逻辑(计算逻辑)
				2. 派生指标: 基于原子指标，做进一步分析
					派生指标 = 原子指标 + 统计周期 + 业务限定 + 统计粒度
				3. 衍生指标
					需要多个派生指标一起获取衍生指标，如比率
	5.公共维度层(Common/Dimension,DIM)
		Dimension，维度，分析数据的角度
		功能: 存储维度模型的维度表
		分区策略:
			哪一天采集的数据汇总后就存放到哪一天的分区
			zip表采用时间范围的结束时间作为分区
		存储格式: orc列式存储 + snappy压缩
		命名规范: dim_表名_全量表或者拉链表标识(full/zip)

数据仓库建模理论
	1.ER模型
		Entity Relationship 实体关系
		使用面向对象的方式来设计数据库的表
		多对一: 在多的一方增加一的一方的引用
		一对多: 在一的一方增加多的一方的集合引用
		一对一: 基本信息和详细信息，都增加对方的引用，主外键相同
		多对多: 双向的一对多，就称之为多对多，一般会采用第三张表建立关系
		函数依赖: 假设有2个非空数据集A和B，A中的a可以通过特殊的关联关系确定B中的b，那么称b函数依赖于a
			完全函数依赖
			部分函数依赖
			传递(间接)函数依赖
		第一范式: 属性不可切割，表的字段必须细化到不能再细化
		第二范式: 不能存在部分函数依赖，减少冗余，增强一致性
		第三范式: 不能存在传递函数依赖
	2.维度模型
		维度模型中表分为2大类:
			事实表: 存储行为数据
			维度表: 存储状态数据
		1.维度表
			1. 表的设计
				将共通性状态数据剥离出来，形成独立的一张表
				围绕业务过程所处的环境进行设计，主要包含一个主键和各种维度字段
			2. 设计步骤
				1. 确定维度
					理论上每一个维度都应该创建一张独立的表
					如果多个维度之间存在关联关系，为保证维度的唯一性，可以将多个维度融合成一张表
					如果维度数据量少，应用面窄，则无需创建独立的维度表，仅声明在事实(行为)表中即可，这个操作称之为: 维度退化
					如果维度数据量少，应用面广，可以将多个这样类型的维度使用一张共通表声明，这样的表称之为编码表(码表，字典表)
				2. 确定主维表和相关维表
					这里的主维表和相关维表是用于主要分析维度字段和相关分析维度字段的业务表(MySQL)
						主维表: user_info
						相关维表: user_address
				3. 确定维度属性(维度字段)
					如果字段不能用于统计分析，就不需要
					维度字段是否一定存在
					确定维度属性时，需要遵循以下要求:
						尽可能地丰富(能要全都要)
						编码和文字共存
						沉淀(计算和转换)维度属性
			3. 维度变化
				维度属性通常不是静态的，而是会随时间变化的，数据仓库的一个重要特点就是反映历史的变化，所以如何保存维度的历史状态是维度设计的重要工作之一
				保存维度数据的历史状态，通常有两种做法: 全量快照表，拉链表
				1. 全量快照表
					离线数据仓库的计算周期通常为每天一次，所以可以每天保存一份全量的维度数据
					优点: 简单而有效，开发和维护成本低，且方便理解和使用
					缺点: 浪费存储空间，尤其是当数据的变化比例比较低时
				2. 拉链表
					拉链表的意义就在于能够更加高效的保存维度信息的历史状态
					作用: 记录每条信息的生命周期，一旦一条记录的生命周期结束，就重新开始一条新的记录，并把当前日期放入生效开始日期
					场景: 适合于数据会发生变化，但是变化频率并不高的维度(缓慢变化维)
					使用: 通过，生效开始日期<=某个日期 且 某个日期<=生效结束日期，能够得到某个时间点的数据全量切片
		2.事实表
			1. 表的设计
				包含与该业务过程有关的维度引用(维度表外键)，以及该业务过程的度量(通常是可累加的数字类型字段)
				必要的维度字段 + 度量值(用于计算的字段) + 可选维度
				如果一个行为无法产生用于度量(统计)的值，那就无需创建事实表
			2. 事实表主要分为三大类: 事务事实表，周期快照事实表，累计快照事实表
			3. 事务事实表
				1. 概述
					用来记录各业务过程，保存原子性的业务行为数据，即最细粒度的操作事件
					是否创建独立的事实表取决于独立的行为是否需要统计
					绝大多数事实表都是事务事实表
					增量
					粒度: 描述行为表中一行数据的详细程度，描述的越详细粒度越细。维度越多，粒度越细
				2. 设计步骤
					1. 选择业务过程: 确定表
					2. 声明粒度: 确定行
					3. 确认维度: 确定列
					4. 确认事实: 确定度量值(用于统计的列)
				3. 分区策略: 哪一天的业务行为就存放到哪一天的分区
			4. 周期快照事实表
				1. 概述
					以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型(商品库存，账户余额)或者状态型(空气温度，行驶速度)指标
					剩余数量概念在业务中非常重要，一般业务中都会设计相应的字段进行保存
					余额字段会在每次数据操作中进行修改，最后一次修改的数据状态就是余额
				2. 事实类型
					此处的事实类型是指度量值的类型，而非事实表的类型。事实(度量值)共分为三类，分别是可加事实，半可加事实和不可加事实
					1. 可加事实
						可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实
					2. 半可加事实
						半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实
						以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的
					3. 不可加事实
						不可加事实是指完全不具备可加性，例如比率型事实
						不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母
				3. 分区策略: 哪一天的状态数据就存放到哪一天的分区
			5. 累计快照事实表
				1. 概述
					将一个流程中多个业务行为的状态数据保存到一张表中，目的是统计不同业务行为之间的业务关系
					通常具有多个日期字段，每个日期对应业务流程中的一个关键业务过程(里程碑)
					主要用于分析业务过程(里程碑)之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效
				2. 分区策略: 以业务时间为基准设计分区,推荐使用流程中最后一个业务的时间作为分区