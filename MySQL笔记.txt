1.基本查询
	1. 查询表中所有数据
		select * from 表名
	2. 查询表中指定字段数据
		select 字段名1,字段名2 from 表名
	3. null与任何类型数据计算结果都为null
		select 1+null
		select 'abc'+null
	4. 在查询时进行计算操作
		select 字段名+1000 from 表名
	5. 给字段起别名
		select 字段名 `别名` from 表名

2.where过滤
	1. select 字段名 from 表名 where 过滤条件
	2. 过滤条件
		1. =
		2. <>  #不等于
		3. in(值1,值2)
		4. between 值1 and 值2
		5. is null / is not null
		6. and / or
		7. like '要匹配的字符串'
			1. %  #代表任意长度的字符串
			2. _  #代表1个字符
			3. \  #代表转义字符
			4. like 字符串 escape 字符  #使用指定字符代替转义字符

3.排序
	先按字段3的升序/降序排列，若字段3相同，再按照字段4排序
	select 字段名1,字段名2
	from 表名
	where 过滤条件
	order by 字段名3 asc/desc,字段名4 asc/desc;

4.多表查询
	1.sql192语法
		select 字段名1,字段名2
		from 表名1,表名2
		where 连接条件;
	2.sql199语法
		select 字段名1,字段名2
		from 表名1 [别名1]
		join 表名2 [别名2]
		on 连接条件
		join 表名3 [别名3]
		on 连接条件
		where 过滤条件
		order by 字段名1 asc,字段名2 desc;
	3.表和表的连接方式
		1. 自连接 vs 非自连接
		2. 等值连接 vs 非等值连接
		3. 内连接 vs 外连接
			1. 左外连接
				select 字段名1,字段名2
				from 表名1 别名1
				left join 表名2 别名2 on 别名1.字段名3 = 别名2.字段名3;
			2. 右外连接
				select 字段名1,字段名2
				from 表名1 别名1
				right join 表名2 别名2 on 别名1.字段名3 = 别名2.字段名3;
			3. 满外连接
				select 字段名1,字段名2
				from 表名1 别名1
				left join 表名2 别名2 on 别名1.字段名3 = 别名2.字段名3
				union
				select 字段名1,字段名2
				from 表名1 别名1
				right join 表名2 别名2 on 别名1.字段名3 = 别名2.字段名3;

5.函数
	1.单行函数
		- lower(字符串) / upper(字符串)
			字符串全部变小写/大写
		- concat(字符串1,字符串2)
			字符串拼接
		- substr(字符串,起始位置(第1个下标为1),截取长度)
			字符串截取
		- length(字符串)
			字符串长度
		- instr(字符串,字符)
			字符串中首个匹配字符位置
		- lpad(字符串,总长度,填充字符) / rpad(字符串,总长度,填充字符)
			字符串短于指定长度的从左侧/右侧使用指定字符填充
		- trim(字符 from 字符串)
			去除字符串两端指定的字符
		- replace(字符串,被替换字符,替换字符)
			字符串替换
		- round(值,四舍五入到小数点后几位)
			四舍五入
		- truncate(值,位数)
			截断
		- mod(值1,值2)
			取余,结果的正负与第一个值有关
		- now()
			日期
		- version()
			查看版本
	2.多行函数
		1. sum()
		2. avg()
			avg()计算时不包括null
		3. max()
		4. min()
		5. count()
			1. count(*)
			2. count(1)
		6. distinct
			去重(若有多个字段，对多个字段的组合进行去重)
			select distinct 字段名1,字段名2
			from 表名;
	3.通用函数
		1.
		case 字段名
			when 值1 then 返回值1
			when 值2 then 返回值2
			when 值3 then 返回值3
			else 返回值4
		end;
		2.
		case
			when 表达式1 then 返回值1
			when 表达式2 then 返回值2
			when 表达式3 then 返回值3
			else 返回值4
		end;

6.分组与过滤
	select 字段名1
	from 表名
	where 过滤条件
	group by 字段名1,字段名2  (有多个字段时，先按照字段1分组，再按照字段2分组)
	having 过滤条件
	order by 字段名1,字段名2;

		#where  是在分组前过滤
		#having  是在分组后过滤

7.子查询
	1. 在一条查询语句a中，嵌套另一条查询语句b，b语句叫做子查询，a语句叫做主查询
	2. 单行子查询
		子查询返回的结果只有一条
		单行子查询使用的运算符有: > < >= <= <> =，如果子查询返回的是多行就会报错
		子查询返回的字段只能有一个
	3. 多行子查询
		子查询返回的结果有多条
		多行子查询使用的运算符: in any all
		IN (多行子查询): 等于其中任意一个即可
		>any(多行子查询): 大于其中任意一个即可
		>all(多行子查询): 大于所有的才可以

8.库操作
	1. 查看所有的库
		show databases
	2. 选中库
		use mysql
	3. 创建库
		create database [if not exists] 库名 [character set '编码集']
	4. 查看库的信息，库的创建语句  默认编码集UTF8MB4
		show create database 库名
	5. 修改库的编码集  一般不改
		alter database 库名 character set '编码集'
		在mysql8.0之前，utf8都是mb3。mysql8.0开始变成mb4
	6. 删除库
		drop database [if exists] 库名

9.表操作
	1. 查看所有表
		show tables
	2. 查看表结构
		desc 表名
	3. 查看表的创建语句
		show create table 表名
	4. 创建表
		1. 方式一
			create table [if not exists] 表名(
				字段名1 字段类型,
				字段名2 字段类型,
				字段名3 字段类型(如果是最后一个字段不加逗号，除非有其他约束)
		)[character set '编码集']
		2. 方式二  基于现有的表创建新表
			create table 新表名 like 已经存在的表名
		3. 方式三  将查询结果创建为一张新表
			create table 表名
			select ...
			from xxx
			xxx;
	5. 删除表
		drop table [if exists] 表名

10.字段类型
	int  4字节整型
	char  定长字符串，默认1个字符
	varchar  不定长字符串，必须指定长度
	text  长文本数据，最大4G
	blob  二进制长文本数据，最大4G
	float(M,D)  M=整数位=小数位，D=小数位
	double(M,D)
	date
	time
	datetime
	timestamep
	set(值1,值2)  集合，可以写集合中的多个
	enum(值1,值2)  枚举，只能写枚举中的一个

11.命名规则
	1. 库名不超过30个字符
	2. 只能使用数字字母下划线
	3. 字符间不要有空格
	4. 保持字段名和类型的一致性

12.字段操作
	1. 向表中插入字段
		alter table 表名 add [column] 字段名 字段类型
	2. 修改字段名字
		alter table 表名 change [column] 原字段名 新字段名 字段类型
	3. 修改字段类型
		alter table 表名 modify [column] 字段名 新字段类型
		alter table 表名 change [column] 原字段名 新字段名 新字段类型
	4. 删除字段
		alter table 表名 drop [column] 字段名
	5. 修改表名
		alter table 原表名 rename to 新表名

13.数据操作
	1.增
		1. 插入数据
			insert into 表名(字段名1,字段名2) values(值1,值2),(值3,值4)
			如果插入的是全字段，表名后面的字段名可以省略不写
		2. 将查询的数据插入表中
			insert into 表名(字段名1,字段名2)
			select 字段名1,字段名2
			from xxx
			xxx;
			查询的字段与被插入的字段，个数与类型要保持一致
	2.删
		delete from 表名 [where...]
		truncate table 表名 - 清空表中数据，不可以使用事务
	3.改
		update 表名 set 字段名1=值1,字段名2=值2 [where...]

14.事务
	一组逻辑操作单元，使数据从一种状态变换到另一种状态
	1. 作用:可以将多个操作绑定在一起，要么都成功，要么都失败
	2.
		try{
			#开启事务
			'...'
			#事务提交
		}
		catch(Exception e){
			#事务回滚 - 将执行了的操作撤销
		}
	3. 开启事务
		1. set autocommit = false
			方式一:必须通过sere autocommit = true 才可以关闭事务
		2. start transaction
			方式二:一旦commit/rollback事务结束
		rollback - 回滚
		commit - 提交，一旦提交不可以回滚
		set autocommit = true - 关闭事务

15.约束
	1.六种约束
		not null - 非空约束
		unique - 唯一约束
		primary key - 主键，非空且唯一
		foreign key - 外键
			constraint 索引名 foreign key (本表的字段名) references 主表 (主表的字段名) [on delete casecade]
			创建表时，先创建主表
			插入数据时，先插入主表d
			删除数据时，先删除从表
			级联删除:删除主表时将从表中与主表有关的元素删除
			级联置空:删除主表时将从表中与主表有关的元素置空
		check - 检查约束
		default - 默认值
	2.约束分为:列级约束 vs 表级约束
		1. 列级约束:同时只约束一列
			create table 表名 (
				id int primary key,
				sid int unique,
				name varchar(20) not null,
				age int default 18,
				score int check (score > 60)
			);
		2. 表级约束:同时可以约束多列,default与not null没有表级约束
			create table 表名 (
				id int,
				sid int,
				constraint 索引名 primary key (id, sid)
			);
		3. 自增 auto_increment
			create table 表名 (
				id int primary key auto_increment
			);
	3.创建表后添加约束
		添加约束:alter table 表名 add primary key(字段名)
		修改约束:alter table 表名 modify 字段名 类型 primary key
		删除约束:alter table 表名 drop primary key

16.分页
	select * from 表名 limit 索引值,数据条数
	select * from 表名 limit 0,10
	select * from 表名 limit 10,10
	select * from 表名 limit 20,10

17.mysql语句执行顺序
	select 字段名1,字段名2
	from 表名
	where 过滤条件
	group by 字段名1,字段名2
	having 过滤条件
	order by 字段名1 asc/desc,字段名2 asc/desc
	limit 索引值,数据条数

	执行顺序:
	from 表名
	where 过滤条件 - 不可以使用别名
	group by 字段名1,字段名2
	having 过滤条件 - 可以使用别名,建议不使用别名

	select 字段名1,字段名2

	order by 字段名1 asc/desc,字段名2 asc/desc - 不可以使用别名
	limit 索引值,数据条数