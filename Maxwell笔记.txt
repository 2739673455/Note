1.Maxwell简介
	1.概述
		Maxwell会实时监控MySQL数据库的数据变更区别(包括insert,update,delete)，并将变更数据以JSON格式发送给Kafka等流数据处理平台
	2.Maxwell输出数据格式
		- database  #变更数据所属的数据库
		- table  #表更数据所属的表
		- type  #数据变更类型
		- ts  #数据变更发生的时间
		- xid  #事务id
		- commit  #事务提交标志，可用于重新组装事务
		- data  #对于insert类型，表示插入的数据；对于update类型，标识修改之后的数据；对于delete类型，表示删除的数据
		- old  #对于update类型，表示修改之前的数据，只包含变更字段

2.Maxwell原理
	1.MySQL二进制日志
		二进制日志(Binlog)是MySQL服务端非常重要的一种日志，它会保存MySQL数据库的所有数据变更记录，Binlog的主要作用包括主从复制和数据恢复，Maxwell的工作原理和主从复制密切相关
	2.MySQL主从复制
		MySQL的主从复制，就是用来建立一个和主数据库完全一样的数据库环境，这个数据库称为从数据库
		1. 主从复制的应用场景如下:
			1. 做数据库的热备:主数据库服务器故障后，可切换到从数据库继续工作
			2. 读写分离:主数据库只负责业务数据的写入操作，而多个从数据库只负责业务数据的查询工作，在读多写少场景下，可以提高数据库工作效率
		2. 主从复制的工作原理如下:
			1. Master主库将数据变更记录，写到二进制日志(binary log)中
			2. Slave从库向MySQL Master发送dump协议，将Master主库的binary log events拷贝到它的中继日志(relay log)
			3. Slave从库读取并回放中继日志中的事件，将改变的数据同步到自己的数据库
		3. Maxwell原理
			Maxwell的工作原理是将自己伪装成Slave，并遵循MySQL主从复制的协议，实时读取MySQL数据库的二进制日志(Binlog)，从中获取变更数据，再将变更数据以JSON格式发送至Kafka等流处理平台

3.Maxwell部署
	1.启用MySQL Binlog
		MySQL服务器的Binlog默认是未开启的，如需进行同步，需要先进行开启
		修改MySQL配置文件/etc/my.cnf，增加如下配置:
			server-id = 1
				#数据库id
			log-bin=mysql-bin
				#启动binlog，该参数的值会作为binlog的文件名
			binlog_format=row
				#binlog类型，maxwell要求为row类型
			binlog-do-db=gmall
				#启用binlog的数据库，需根据实际情况作出修改
		重启MySQL服务
		MySQL Binlog模式：
		Statement-based
			基于语句，Binlog会记录所有写操作的SQL语句，包括insert、update、delete等
			优点：节省空间
			缺点：有可能造成数据不一致，例如insert语句中包含now()函数
		Row-based
			基于行，Binlog会记录每次写操作后被操作行记录的变化
			优点：保持数据的绝对一致性
			缺点：占用较大空间
		mixed
			混合模式，默认是Statement-based，如果SQL语句可能导致数据不一致，就自动切换到Row-based
		Maxwell要求Binlog采用Row-based模式
	2.创建Maxwell所需数据库和用户
		Maxwell需要在MySQL中存储其运行过程中的所需的一些数据，包括binlog同步的断点位置(Maxwell支持断点续传)等，故需要在MySQL为Maxwell创建数据库及用户
		1. 创建数据库
			create database maxwell;
		2. 创建Maxwell用户并赋予其必要权限
			create user 'maxwell'@'%' identified by 'maxwell';
			grant all on maxwell.* to 'maxwell'@'%';
			grant select, replication client, replication slave on *.* to 'maxwell'@'%';
	3.配置Maxwell
		1. 修改Maxwell配置文件名称
			cd /opt/module/maxwell
			cp config.properties.example config.properties
		2. 修改Maxwell配置文件
			producer=kafka
				#Maxwell数据发送目的地，可选配置有stdout|file|kafka|kinesis|pubsub|sqs|rabbitmq|redis
			kafka.bootstrap.servers=hadoop102:9092,hadoop103:9092,hadoop104:9092
				# 目标Kafka集群地址
			kafka_topic=topic_db
				#目标Kafka topic，可静态配置，例如:maxwell，也可动态配置，例如：%{database}_%{table}

			# MySQL相关配置
			host=hadoop102
			user=maxwell
			password=maxwell
			jdbc_options=useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true

			filter=exclude:gmall.z_log
				# 过滤gmall中的z_log表数据，该表是日志数据的备份，无须采集
			producer_partition_by=primary_key
				# 指定数据按照主键分组进入Kafka不同分区，避免数据倾斜

4.Maxwell使用
	1.Maxwell启停 
		若Maxwell发送数据的目的地为Kafka集群，则需要先确保Kafka集群为启动状态
		1. 启动Maxwell
			/opt/module/maxwell/bin/maxwell --config /opt/module/maxwell/config.properties --daemon
		2. 停止Maxwell
			ps -ef | grep com.zendesk.maxwell.Maxwell | grep -v grep | awk '{print $2}' | xargs kill -9
		3. Maxwell启停脚本
			#!/bin/bash
			MAXWELL_HOME=/opt/module/maxwell-1.29.2
			status_maxwell(){
				result=`ps -ef | grep com.zendesk.maxwell.Maxwell | grep -v grep | wc -l`
				return $result
			}
			start_maxwell(){
				status_maxwell
				if [[ $? -lt 1 ]];then
					echo "启动Maxwell"
					$MAXWELL_HOME/bin/maxwell --config $MAXWELL_HOME/config.properties --daemon
				else
					echo "Maxwell正在运行"
				fi
			}
			stop_maxwell(){
				status_maxwell
				if [[ $? -gt 0 ]];then
					echo "停止Maxwell"
					ps -ef | grep com.zendesk.maxwell.Maxwell | grep -v grep | awk '{print $2}' | xargs kill -9
				else
					echo "Maxwell未在运行"
				fi
			}
			case $1 in
				start )start_maxwell;;
				stop )stop_maxwell;;
				restart )
					stop_maxwell
					start_maxwell
				;;
			esac
	2.历史数据全量同步
		有时可能需要使用到MySQL数据库中从历史至今的一个完整的数据集。这就需要我们在进行增量同步之前，先进行一次历史数据的全量同步
		1. Maxwell-bootstrap
			Maxwell提供了bootstrap功能来进行历史数据的全量同步，命令如下:
			/opt/module/maxwell/bin/maxwell-bootstrap --database gmall --table user_info --config /opt/module/maxwell/config.properties
		2. boostrap数据格式
			采用bootstrap方式同步的输出数据格式如下:
			{
				"database": "fooDB",
				"table": "barTable",
				"type": "bootstrap-start",
				"ts": 1450557744,
				"data": {}
			}
			{
				"database": "fooDB",
				"table": "barTable",
				"type": "bootstrap-insert",
				"ts": 1450557744,
				"data": {
					"txt": "hello"
				}
			}
			{
				"database": "fooDB",
				"table": "barTable",
				"type": "bootstrap-insert",
				"ts": 1450557744,
				"data": {
					"txt": "bootstrap!"
				}
			}
			{
				"database": "fooDB",
				"table": "barTable",
				"type": "bootstrap-complete",
				"ts": 1450557744,
				"data": {}
			}
			注意事项:
			1. 第一条type为bootstrap-start和最后一条type为bootstrap-complete的数据，是bootstrap开始和结束的标志，不包含数据，中间的type为bootstrap-insert的数据才包含数据
			2. 一次bootstrap输出的所有记录的ts都相同，为bootstrap开始的时间